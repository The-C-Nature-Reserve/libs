==60339== Memcheck, a memory error detector
==60339== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==60339== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==60339== Command: smap/out
==60339== Parent PID: 50368
==60339== 
==60339== Use of uninitialised value of size 8
==60339==    at 0x484CC44: strcmp (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==60339==    by 0x10980F: justo (smap.c:223)
==60339==    by 0x109874: smap_insert (smap.c:234)
==60339==    by 0x109D1A: test_insert_get (test.c:61)
==60339==    by 0x10B185: main (test.c:149)
==60339== 
==60339== Invalid read of size 1
==60339==    at 0x484CC44: strcmp (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==60339==    by 0x10980F: justo (smap.c:223)
==60339==    by 0x109874: smap_insert (smap.c:234)
==60339==    by 0x109D1A: test_insert_get (test.c:61)
==60339==    by 0x10B185: main (test.c:149)
==60339==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==60339== 
==60339== 
==60339== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==60339==  Access not within mapped region at address 0x0
==60339==    at 0x484CC44: strcmp (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==60339==    by 0x10980F: justo (smap.c:223)
==60339==    by 0x109874: smap_insert (smap.c:234)
==60339==    by 0x109D1A: test_insert_get (test.c:61)
==60339==    by 0x10B185: main (test.c:149)
==60339==  If you believe this happened as a result of a stack
==60339==  overflow in your program's main thread (unlikely but
==60339==  possible), you can try to increase the size of the
==60339==  main thread stack using the --main-stacksize= flag.
==60339==  The main thread stack size used in this run was 8388608.
==60339== 
==60339== HEAP SUMMARY:
==60339==     in use at exit: 1,256 bytes in 4 blocks
==60339==   total heap usage: 11 allocs, 7 frees, 6,240 bytes allocated
==60339== 
==60339== LEAK SUMMARY:
==60339==    definitely lost: 0 bytes in 0 blocks
==60339==    indirectly lost: 0 bytes in 0 blocks
==60339==      possibly lost: 0 bytes in 0 blocks
==60339==    still reachable: 1,256 bytes in 4 blocks
==60339==         suppressed: 0 bytes in 0 blocks
==60339== Rerun with --leak-check=full to see details of leaked memory
==60339== 
==60339== Use --track-origins=yes to see where uninitialised values come from
==60339== For lists of detected and suppressed errors, rerun with: -s
==60339== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
